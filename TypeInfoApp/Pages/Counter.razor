@page "/counter"

<h1>Get info about type</h1>

<input @bind=@Text/>

<button @onclick="OutputInfo">Fetch</button>

<style>

td {
    padding: 10px;
}

th {
    padding: 10px;
}

a.type-link {
    color: #DD9966;
}

</style>

@if (members.OfType<FieldInfo>() is var fields && fields.Any())
{
    <h2>Fields</h2>
    <table>
        <thead>
            <tr>
                <th>Visibility</th>
                <th>Static?</th>
                <th>Type</th>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var field in fields)
            {
                <tr>
                    <td>@(field.GetVisibilityModifier())</td>
                    <td>@(field.IsStatic ? "static" : "")</td>
                    <td>
                    <a class="type-link" @onclick="() => LoadType(field.FieldType)">
                        @(field.FieldType)
                    </a>
                    </td>
                    <td>@(field.Name)</td>
                    <td>
                        <details><summary>All info</summary>
                            <textarea style="width: 400px; height: 400px">
                            @TypeInfoFetcher.GetAllInfo(field)
                            </textarea>
                        </details>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (members.OfType<PropertyInfo>() is var props && props.Any())
{
    <h2>Properties</h2>
    <table>
        <thead>
            <tr>
                <th>Accessors</th>
                <th>Type</th>
                <th>Name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var prop in props)
            {
                <tr>
                    <td>
                        @prop.GetAccessorsInfo()
                    </td>
                    <td>
                    <a class="type-link" @onclick="() => LoadType(prop.PropertyType)">
                        @(prop.PropertyType)
                    </a>
                    </td>
                    <td>@(prop.Name)</td>
                    <td>
                        <details><summary>All info</summary>
                            <textarea style="width: 400px; height: 400px">
                                @TypeInfoFetcher.GetAllInfo(prop)
                            </textarea>
                        </details>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@using System.Reflection
@using HonkSharp.Fluency
@code {
    

    public string Info;
    public string Text = "System.String";
    public IEnumerable<MemberInfo> members = Enumerable.Empty<MemberInfo>();

    private void OutputInfo()   
        => members = TypeInfoFetcher.GetMembers(Text);

    private void LoadType(Type type)
        => type.ToString()
            .Alias(out var typeName)
            .Pipe(Type.GetType)
            ?.Let(out Text, typeName)
            .Pipe(_ => OutputInfo());
}
